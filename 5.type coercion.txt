                                    5.Type Coercion
concatenation of the string
123 + "4" = "1234"
    Here the number 123 is converted as string "123" and added with the string "4" this type conversion is called as Type Coercion.

"==" Operator :
    type conversion is allowed in "==" Operator
    EXAMPLE :
        a = 10;
        b = "10";
        if(a == b){
            console.log('they are equal')
        }
    O/P:
        they are equal gets printed coz, the number 10 in a is converted to string 10 and compared with b.

"===" Operator :
    Type conversion is not allowed in "===" Operator.
    EXAMPLE :
        a = 10;
        b = "10";
        if(a === b){
            console.log('they are equal')
        }
    O/P:
        nothing got printed coz, the number 10 in a is not equal to string 10 in b.

converting numbers, strings undefined and null to an boolean value.
     0,"",undefined and null are type converted to a bool value of false
    non zero value, non empty strings are converted to bool value of true[-10 is also true]


SUMMARY :
    -> JS is "flexible" with typing.
    -> Values of all types have an associated boolean value.
    -> Always use === for precise checks (both value and type).

